---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: airflow-web
  namespace: airflow
  labels:
    app: airflow-web
spec:
  replicas: 1
  strategy:
    # Smooth rolling update of the Web UI
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: airflow-web
  template:
    metadata:
      namespace: airflow
      labels:
        app: airflow-web
    spec:
      securityContext:
        fsGroup: 1000
      serviceAccountName: airflow
      restartPolicy: Always
      initContainers:
      - name: "init-airflow"
        image: wildflowerschools/wf-deep-docker:airflow-v13
        imagePullPolicy: IfNotPresent
        env:
          - name: AIRFLOW__KUBERNETES__DAGS_VOLUME_HOST
            value: /data/airflow/dags
        envFrom:
          - secretRef:
              name: airflow-env
        command:
          - "bash"
        args:
          - "-cx"
          - "bash /airflow/scripts/init-airflow.sh"
      containers:
      - name: nginx
        image: nginx
        imagePullPolicy: IfNotPresent
        ports:
          - name: nginx
            containerPort: 80
        volumeMounts:
          - name: nginx
            mountPath: /etc/nginx/conf.d/default.conf
            subPath: nginx.conf
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          httpGet:
            path: /health
            port: 80
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          httpGet:
            path: /health
            port: 80
      - name: webserver
        image: wildflowerschools/wf-deep-docker:airflow-v13
        imagePullPolicy: IfNotPresent
        ports:
        - name: webserver
          containerPort: 8080
        command:
          - "bash"
        args:
          - "-cx"
          - "bash /airflow/scripts/startup-airflow-webserver.sh"
        envFrom:
          - secretRef:
              name: airflow-env
        env:
        - name: AIRFLOW_KUBE_NAMESPACE
          value: airflow
        volumeMounts:
        - name: airflow-config
          mountPath: /airflow/airflow.cfg
          subPath: airflow.cfg
        - name: airflow-logs
          mountPath: /airflow/logs
        - name: airflow-dags
          mountPath: /airflow/dags
        readinessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          periodSeconds: 5
          httpGet:
            path: /health
            port: 8080
        livenessProbe:
          initialDelaySeconds: 5
          timeoutSeconds: 5
          failureThreshold: 5
          httpGet:
            path: /health
            port: 8080
      volumes:
      - name: airflow-logs
        hostPath:
          path: /data/airflow/logs
          type: Directory
      - name: airflow-dags
        persistentVolumeClaim:
          claimName: airflow-dags
          readOnly: true
      - name: airflow-config
        configMap:
          name: airflow-config
      - name: nginx
        configMap:
          name: airflow-nginx

---
apiVersion: v1
kind: Service
metadata:
  name: airflow-web
  namespace: airflow
  labels:
    app: airflow-web
spec:
  type: LoadBalancer
  selector:
    app: airflow-web
  ports:
    - name: web
      protocol: TCP
      port: 8085
      targetPort: 8080

---
apiVersion: v1
kind: Service
metadata:
  name: airflow-web-other
  namespace: airflow
  labels:
    app: airflow-web
spec:
  selector:
    app: airflow-web
  ports:
    - port: 8080
      name: airflow


---
apiVersion: v1
kind: ConfigMap
metadata:
  name: airflow-nginx
  namespace: airflow
  labels:
    app: airflow
data:
  nginx.conf: |
    server {
      listen 80;
      server_name _;
      # if ($http_x_forwarded_proto = "http") {
      #     return 301 https://$host$request_uri;
      # }
      location / {
        proxy_set_header X-Forwarded-Proto https;
        proxy_pass http://localhost:8080;
        proxy_set_header Host $host;
        proxy_redirect off;
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection "upgrade";
      }
      location /health {
        return 200 "healthy\n";
        add_header Content-Type text/plain;
      }
    }
